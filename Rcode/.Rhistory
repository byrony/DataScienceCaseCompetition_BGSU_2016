sum(with(train,Gender==F&Donation=1))
sum(with(train,Gender==F & Donation==1))
library(plyr)
install.packages('plyr')
library(plyr)
?count
?count.fields
count(train,'Gender')
count(train,'Gender=F'&'Donation=1')
sum(with(train,Gender==F & Donation=1))
sum(with(train,Gender==F & Donation==1))
count(df)
table(df)
table(df$Gender,df$Donation)
df=data.frame(train)
aggregate(df,by=Gender(df$))
aaa=data.frame(Gender,Donation)
sum(with(aaa,Gender=F & Donation=1))
require(plyr)
ddply(d1,.(Donation), summarize,All=length(Donation),Donation=sum(Donation=="1"),ofwhichFemale=sum(Gender=="F"))
d1=data.frame(Gender,Donation)
ddply(d1,.(Donation), summarize,All=length(Donation),Donation=sum(Donation=="1"),ofwhichFemale=sum(Gender=="F"))
table(train$Gender)
prop.table(table(train$Gender))
table(train$Gender, train$Donation)
prop.table(table(train$Gender, train$Gender))
prop.table(table(train$Gender, train$Donation))
?prop.table
prop.table(table(train$Gender, train$Donation), 1)
prop.table(table(train$Gender, train$Donation), 2)
table(train$Gender)
?strsplit
corr(Donation~NeighbourhoodCod,Age)
corr(Donation,NeighbourhoodCod,Age)
cor(Donation,NeighbourhoodCod,Age)
cor(Income,Age)
train <- read.csv("~/Desktop/train.csv")
View(train)
attach(train)
pro.table(table(train$Donation,train$NeighborhoodCode))
prob.table(table(train$Donation,train$NeighborhoodCode))
prop.table(table(train$Donation,train$NeighborhoodCode))
prop.table(table(train$Donation,train$NeighborhoodCode,1))
?prop.table
prop.table(table(train$Donation,train$NeighborhoodCode, 1))
prop.table(table(train$Donation,train$NeighborhoodCode,margin=1))
prop.table(table(train$Donation,train$NeighborhoodCode),margin=1)
prop.table(table(train$NeighborhoodCode,train$Donation),margin=1)
prop.table(table(train$Gender,train$Donation),margin=1)
prop.table(table(train$income,train$Donation),margin=1)
prop.table(table(train$Income,train$Donation),margin=1)
table(train$Income,train$Donation)
prop.table(table(train$AvgHomeVal,train$Donation),margin=1)
attach(train)
prop.table(table(train$NeighborhoodCode,train$Donation),margin=1)
prop.table(table(train$Gender,train$Donation),margin=1)
table(train$Income,train$Donation)
df1=data.frame(AvgHomeVal,Donation)
subset(df1,AvgHomeVal>10 & AvgHomeVal<30)
library(yplr)
install.packages(ylpr)
install.packages(yplr)
install.packages(yrpl)
install.packages(plyr)
>install.packages()
?install.packages()
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
?dt
?tapply
dt[,.(total=sum(AmDonated),n=length(AmDonated),by=Donation)]
?dt
df=data.frame(NeighborPlace)
train_2 <- read.csv("~/Desktop/train_2.csv")
View(train_2)
attache(train_2)
attach(train_2)
deattach(train)
detach(train)
train_2 <- read.csv("~/Desktop/train_2.csv")
View(train_2)
attach(train_2)
?aggregate
x=data.frame(NeighborPlace,AmDonated)
aggregate(x$AmDonated,by=list(x$NeighborPlace),FUN=sum)
table(tran_2$NeighborPlace,tran_2$Donation)
table(train_2$NeighborPlace,tran_2$Donation)
table(train_2$NeighborPlace,train_2$Donation)
prop.table(table(train_2$NeighborPlace,train_2$Donation))
y=data.frame(NeighborStatus,AmDonated)
aggregate(x$AmDonated,by=list(x$NeighborStatus),FUN=sum)
aggregate(y$AmDonated,by=list(y$NeighborStatus),FUN=sum)
table(train_2$NeighborStatus,train_2$Donation)
prop.table(table(train_2$NeighborStatus,train_2$Donation))
c=data.frame(Income,AmDonated)
aggregate(c$AmDonated,by=list(c$Income),FUN=sum)
table(train_2$Income,train_2$Donation)
prop.table(table(train_2$Income,train_2$Donation))
d=data.frame(LastDol,AmDonated)
aggregate(d$AmDonated,by=list(d$LastDol),FUN=sum)
?sapply
?cut
a1=cut(train_2$LasDol,breaks=4)
a1=cut(LasDol,breaks=4)
a1=cut(train_2$LastDol,breaks=4)
table(a1)
a2=cut(train_2$LastDol,breaks=10)
table(a2)
aggregate(AmDonated,by=list(a2),FUN=sum)
a3=cut(train_2$LastDol,breaks=200)
table(a3)
aggregate(AmDonated,by=list(a3),FUN=sum)
table(a2,Donation)
prop.table(table(a2,Donation))
a4=cut(train_2$LastDol,breaks=100)
table(a4)
aggregate(AmDonated,by=list(a4),FUN=sum)
table(a4,Donation)
prop.table(table(a4,Donation))
a5=cut(train_2$AvgHomeVal,breaks=100)
table(a5)
a6=cut(train_2$AvgHomeVal,breaks=1000)
table(a6)
a7=cut(train_2$AvgHomeVal,breaks=6)
table(a7)
aggregate(AmDonated,by=list(a7),FUN=sum)
table(a7,Donation)
prop.table(table(a7,Donation))
a8=cut(train_2$MinDol,breaks=100)
table(a8)
aggregate(AmDonated,by=list(a8),FUN=sum)
table(a8,Donation)
prop.table(table(a8,Donation))
a9=cut(train_2$AvgDol,breaks=100)
table(a9)
aggregate(AmDonated,by=list(a9),FUN=sum)
table(a9,Donation)
prop.table(table(a9,Donation))
a10=cut(train_2$LifeGiftNum,breaks=10)
table(a10)
aggregate(AmDonated,by=list(a10),FUN=sum)
table(a10,Donation)
prop.table(table(a10,Donation))
a11=cut(train_2$LifeGiftPromNum,breaks=10)
table(a11)
aggregate(AmDonated,by=list(a11),FUN=sum)
table(a11,Donation)
prop.table(table(a11,Donation))
？cut
attach(train)
table(train$Donation,train$NeighborhoodCode)
prop.table(table(train$Donation,train$NeighborhoodCode))
aggreate(train$AmDonated,by=list(train$NeighborhoodCode),FUN=sum)
aggregate(train$AmDonated,by=list(train$NeighborhoodCode),FUN=sum)
prop.table(table(train$NeighborhoodCode,train$Donation))
table(train$NeighborhoodCode,train$Donation)
67.96+128.65+48.1+150+86.74+192.13+53.33+140.65
867.56*6.5
867.56-140.65
726.91*6.5
62+55
140.65+53.33
46.38+44.99+59.98
53.33+140.65
14.99*3
44.97+3.04
59.98*2
150+48.01+119.96
317.97*6.5
53.33140.65
53.33+140.65
(53.33+140.65)*6.5
if(x>3)
{y<-0}
if(x>3) {
y<-10} else {
y<-0
}
if(x>3){y<-10}else{y<-0}
x=3
if(x>3){y<-10}else{y<-0}
x
y
for(i in 1:10){print(i)}
x=c("a","b","c","d")
for(i in 1:4){peint(x[i])}
for(i in 1:4){print(x[i])}
for (i in seq_along(x)){print(x[i])}
for(letter in x){print(letter)}
for (i in 1:4) print(x[i])
x=matrix(1:6,2,3)
x
for (i in seq_len(nrow(x))){for(j in seq_len(ncol(x))) {print(x[i,j])}}
?seq_len
count=0
while(count<10) {print(count)
count=count+1
}
count=0
while(count<10) {print(count)
count=count+1
}
?rbinom
z=5
while(z>=3 or z<=10){printz(z)}
while(z>=3 or z<=10){printz(z) coin=rbinom(1,1,.5) if(coin=1){ ## random wal z=z+1} else {z=z-1}}
while(z>=3 && z<=10){printz(z) coin=rbinom(1,1,.5) if(coin=1){ ## random wal z=z+1} else {z=z-1}}
while(z>=3 z<=10){printz(z) coin=rbinom(1,1,.5) if(coin=1){ ## random wal z=z+1} else {z=z-1}}
while(z>=3 and z<=10){printz(z) coin=rbinom(1,1,.5) if(coin=1){ ## random wal z=z+1} else {z=z-1}}
while(z>=3 z<=10){printz(z) coin=rbinom(1,1,.5) if(coin=1){ ## random wal z=z+1} else {z=z-1}}
x0=1
tol=1e-8
repeat{x1=computeEstimate() if(abs(x1-x0)<tol{break} else{x0=x1})}
repeat{x1=computeEstimate() if(abs(x1-x0)<tol{break} else{x0=x1})
repeat{
x1=computeEstimate()
if(abs(x1-x0)<tol) {
break
}
else{
x0=x1
}
}
x0<- 1
tol<- 1e-8
repeat {
x1<- computeEstimate()
if(abs(x1-xo) < tol) {
break
} else {
x0 <- x1
}
}
?computeEstimate()
getwd()
add2 <- function(x,y){
x+y
}
add(3,5)
add2(3,5)
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x,n) {
use <- x>n
x[use]
}
x=1:20
above(x,12)
above <- function(x,n=10) {
use <- x>n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- means(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
4500*12
6000*12
8+3.5
11.5/3
40000、18.5
40000/18.5
500*16
(12.97+14.99+12.99+19.79+17.99)*.0675
(14.99+15.79)*.0675
14.99+8.99+11.99+1.45+6.49*2+15.79+16.99
12.99/2*.0675
12.99/2+7.49/2+6.99+4.59+4.99
12.97+12.99/2+7.49/2+6.49+18.89+17.99+12.99+8.79
116*.45
52.2*2
216/3+9
216/3
216/3*2-9
216/5
72-43.2
12+27
216/3*2-9
45+35.74+14.54+33.97
129.25/2
64.625-45/2
28*3*1.0675
46+35.74+14.54+33.97
130.25/2
Book1 <- read.table("~/Desktop/Book1.xlsx", header=TRUE, quote="\"")
View(Book1)
library(gdata)
help(read.xls)
help(Book1.xls)
help(Book1.xlsx)
Book <- read.table("~/Desktop/Book.txt", header=TRUE, quote="\"")
View(Book)
attach(Book)
cbind(FirstName,LasteName)
cbind(FirstName,LastName)
merge(FirstName,LastName)
data.frame(FirstName,LastName)
paste(FirstName,LastName,sep=" ")
paste(c(FirstName,LastName,sep=" "))
paste(FirstName,LastName,sep=)
paste(FirstName,LastName)
>paste()
?paste
?name
?col
FullName=paste(FirstName,LastName)
FullName
list(FullName)
?list()
> FullName
---
Book <- read.table("~/Desktop/Book.txt", header=TRUE, quote="\"")
View(Book)
attach(Book)
> FullName
> FullName
> FullName
> FullName
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
> FullName=paste(FirstName,LastName)
> FullName=paste(FirstName,LastName)
> FullName=paste(FirstName,LastName)
FullName=paste(FirstName,LastName)
> FullName=paste(FirstName,LastName)
FullName=paste(FirstName,LastName)
FullName
Book1=cbind(FirstName,LastName,FullName)
Book1
?export
write.csv(Book1)
write.table(Book1)
write.dta(Book1)
FullName=paste(FirstName,LastName)
Book <- read.table("~/Desktop/Book.txt", header=TRUE, quote="\"")
View(Book)
attach(Book)
FullName=paste(FirstName,LastName)
FullName
Book1=c(FirstName,LastName,FullName)
Book1
Book1=cbind(FirstName,LastName,FullName)
Book1
?cbind
?data.frame
Book1=data.frame(FirstName,LastName,FullName)
Book1
Book1=data.frame(FirstName,LastName,FullName)
Book1
?gwd()
?getwd()
getwd()
write.csv(Book1,"/Users/tongliwen")
write.csv(Book1)
write.csv(Book1,":\Book1.csv")
write.csv(Book1,"Book1.csv")
46+35.74+14.54+33.97+46.85
177.1/2
1300*.05*2
900*.1
90/900
37*2+42*2+20*3
350+255+100+100
3.19+2.4+11.99
17.58+3.19
177.1/2+20.77
sqrt(125)
x=c(1,6,2)
y=c(1,4,3,)
y=c(1,4,3)
ls()
rm(ls())
rm(list=ls())
ls()
x=matrix(data=c(1,2,3,4),nrow=2,ncol=2)
x
x=matrix(c(1,2,3,4),2,2)
x
x=matrix(c(1,2,3,4),2,2,byrow=TRUE)
x
sqrt(x)
x^2
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
set.seed(1303)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is y-axis",main="plot of x vs y")
pdf("figure.pdf")
plot(x,y,col="green")
dev.off()
seq(1,10,length=10)
x=1:10
x
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels=15)
?contour
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
persp(x,y,fa,theta=70,phi=40)
A=matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
Auto=read.table("Auto.data")
fix(Auto)
Auto=read.table("Auto.data",header=T,na.strings="?")
fix(Auto)
dim(Auto)
Auto()
names(Auto)
x<-c(1,3,2,5)
x
x=c(1,6,2)
x
y=c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
x=matrix(data=c(1,2,3,4),nrow=2,ncol=2)
x
x=matrix(c(1,2,3,4),2,2)
matrix(c(1,2,3,4),2,2,byrow=TRUE)
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is y-axis",main="plot x vs y")
pdf("Figure.pdf")
plot(x,y,col="green")
dev.off()
pdf("Figure.pdf")
plot(x,y,col="green")
dev.off()
x=seq(1,10)
x
x=1:10
x
x=seq(-pi,pi,length=50)
y=x
Auto=read.table("Auto")
Auto=read.table("Auto.txt")
plot(cylinders,mpg)
Auto <- read.delim("~/Desktop/An intro to statistical learning/data/Auto.txt")
View(Auto)
plot(cylinders, mpg)
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
plot(Auto$cylinders, Auto$mpg)
plot(cylinders, mpg)
cylinders=as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="red")
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T,horizontal=T)
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(Auto)
summary(mpg)
